#!/bin/bash

# Debug output at script start
echo "[DEBUG] Script started, bash version: $BASH_VERSION" >&2

# Linux Manager V2 - Main Application Entry Point
# Modern Arch Linux system management tool with enhanced architecture
#
# @VERSION: 2.0.0
# @DESCRIPTION: Advanced system management with modular architecture
# @AUTHOR: Linux Manager Team
# @LICENSE: MIT

# Application metadata
readonly APP_NAME="Linux Manager"
readonly APP_VERSION="2.0.0"
readonly APP_ARCHITECTURE="V2"
readonly APP_MIN_BASH_VERSION="4.0"

# Determine application directories
readonly SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
readonly ROOT_DIR="$(cd "$SCRIPT_DIR/.." && pwd)"
readonly CORE_V2_DIR="$ROOT_DIR/src/core/v2"
readonly MODULES_DIR="$ROOT_DIR/src/modules"
readonly DATA_DIR="$ROOT_DIR/src/data"
readonly LOGS_DIR="$ROOT_DIR/logs"

# Create essential directories early
mkdir -p "$LOGS_DIR" "$DATA_DIR" 2>/dev/null

# Export essential paths for the entire application
export ROOT_DIR CORE_V2_DIR MODULES_DIR DATA_DIR LOGS_DIR
export APP_NAME APP_VERSION APP_ARCHITECTURE

# V2 System state tracking
declare -g SYSTEM_INITIALIZED=false
declare -g STARTUP_TIME=""
declare -g STARTUP_DURATION=0

# Color codes for output
if [[ -t 1 ]]; then
    readonly RED='\033[0;31m'
    readonly GREEN='\033[0;32m'
    readonly YELLOW='\033[1;33m'
    readonly BLUE='\033[0;34m'
    readonly CYAN='\033[0;36m'
    readonly WHITE='\033[1;37m'
    readonly BOLD='\033[1m'
    readonly NC='\033[0m'
else
    readonly RED='' GREEN='' YELLOW='' BLUE='' CYAN='' WHITE='' BOLD='' NC=''
fi

# Print application header
print_app_header() {
    cat << EOF

${CYAN}${BOLD}╔══════════════════════════════════════════════════════════════╗${NC}
${CYAN}${BOLD}║                                                              ║${NC}
${CYAN}${BOLD}║              🐧 ${WHITE}Linux Manager V2${CYAN}                       ║${NC}
${CYAN}${BOLD}║                                                              ║${NC}
${CYAN}${BOLD}║          ${WHITE}Công cụ quản lý hệ thống Arch Linux${CYAN}           ║${NC}
${CYAN}${BOLD}║              ${WHITE}Modern • Modular • Powerful${CYAN}                ║${NC}
${CYAN}${BOLD}║                                                              ║${NC}
${CYAN}${BOLD}║                    ${YELLOW}Version ${APP_VERSION}${CYAN}                    ║${NC}
${CYAN}${BOLD}╚══════════════════════════════════════════════════════════════╝${NC}

EOF
}

# Safe color printf function for main script
color_printf_main() {
    local format="$1"
    shift
    printf "$format" "$@"
}

# Print startup status
print_startup_status() {
    local message="$1"
    local status="$2"  # loading, success, error, warning
    
    case "$status" in
        "loading")
            color_printf_main "${CYAN}[🔄] %s...${NC}\n" "$message"
            ;;
        "success")
            color_printf_main "${GREEN}[✅] %s${NC}\n" "$message"
            ;;
        "error")
            color_printf_main "${RED}[❌] %s${NC}\n" "$message"
            ;;
        "warning")
            color_printf_main "${YELLOW}[⚠️ ] %s${NC}\n" "$message"
            ;;
        *)
            color_printf_main "${BLUE}[ℹ️ ] %s${NC}\n" "$message"
            ;;
    esac
}

# Check system prerequisites
check_prerequisites() {
    print_startup_status "Checking system prerequisites" "loading"
    
    local issues=0
    
    # Check Bash version
    if ! version_compare "$BASH_VERSION" "$APP_MIN_BASH_VERSION"; then
        print_startup_status "Bash version $BASH_VERSION is too old (minimum: $APP_MIN_BASH_VERSION)" "error"
        ((issues++))
    fi
    
    # Check if running on supported system
    if [[ ! -f "/etc/arch-release" ]] && [[ ! -f "/etc/manjaro-release" ]]; then
        print_startup_status "System may not be fully supported (designed for Arch Linux)" "warning"
    fi
    
    # Check required commands
    local required_commands=("curl" "git" "make" "gcc" "sudo" "systemctl")
    for cmd in "${required_commands[@]}"; do
        if ! command -v "$cmd" >/dev/null 2>&1; then
            print_startup_status "Required command not found: $cmd" "error"
            ((issues++))
        fi
    done
    
    # Check write permissions for directories
    local required_dirs=("$LOGS_DIR" "$DATA_DIR")
    for dir in "${required_dirs[@]}"; do
        if [[ ! -w "$dir" ]] && ! mkdir -p "$dir" 2>/dev/null; then
            print_startup_status "Cannot write to directory: $dir" "error"
            ((issues++))
        fi
    done
    
    if [[ $issues -eq 0 ]]; then
        print_startup_status "System prerequisites check completed" "success"
        return 0
    else
        print_startup_status "System prerequisites check failed ($issues issues)" "error"
        return 1
    fi
}

# Compare version numbers
version_compare() {
    local version1="$1"
    local version2="$2"
    
    # Simple version comparison for bash versions
    local v1_major="${version1%%.*}"
    local v2_major="${version2%%.*}"
    
    [[ $v1_major -ge $v2_major ]]
}

# Initialize V2 Core Systems
initialize_v2_systems() {
    print_startup_status "Initializing V2 Core Systems" "loading"
    
    local initialization_start=$(date +%s%3N)
    local failed_systems=()
    
    # Load and initialize error handler first
    if load_and_init_system "error_handler" "Error Handler"; then
        print_startup_status "Error handling system initialized" "success"
    else
        failed_systems+=("error_handler")
        print_startup_status "Failed to initialize error handling system" "error"
    fi
    
    # Load and initialize logging system
    if load_and_init_system "logger" "Logging System"; then
        print_startup_status "Logging system initialized" "success"
    else
        failed_systems+=("logger")
        print_startup_status "Failed to initialize logging system" "error"
    fi
    
    # Load and initialize performance monitoring
    if load_and_init_system "performance" "Performance Monitor"; then
        print_startup_status "Performance monitoring initialized" "success"
    else
        failed_systems+=("performance")
        print_startup_status "Performance monitoring initialization failed" "warning"
    fi
    
    # Load and initialize configuration system
    if load_and_init_system "config_manager" "Configuration Manager"; then
        print_startup_status "Configuration system initialized" "success"
    else
        failed_systems+=("config_manager")
        print_startup_status "Failed to initialize configuration system" "error"
    fi
    
    # Load and initialize module loader
    if load_and_init_system "module_loader" "Module Loader"; then
        print_startup_status "Module system initialized" "success"
    else
        failed_systems+=("module_loader")
        print_startup_status "Failed to initialize module system" "error"
    fi
    
    # Load and initialize module registry
    if load_and_init_system "module_registry" "Module Registry"; then
        print_startup_status "Module registry initialized" "success"
    else
        failed_systems+=("module_registry")
        print_startup_status "Module registry initialization failed" "warning"
    fi
    
    # Load and initialize inter-module communication
    if load_and_init_system "module_communication" "Inter-Module Communication"; then
        print_startup_status "Communication system initialized" "success"
    else
        failed_systems+=("module_communication")
        print_startup_status "Communication system initialization failed" "warning"
    fi
    
    # Load V2 modules integration helper
    if load_v2_modules_helper; then
        print_startup_status "V2 modules helper loaded" "success"
    else
        print_startup_status "V2 modules helper not available" "warning"
    fi
    
    local initialization_end=$(date +%s%3N)
    STARTUP_DURATION=$((initialization_end - initialization_start))
    
    if [[ ${#failed_systems[@]} -eq 0 ]]; then
        print_startup_status "All V2 core systems initialized successfully (${STARTUP_DURATION}ms)" "success"
        SYSTEM_INITIALIZED=true
        return 0
    else
        print_startup_status "Core system initialization completed with ${#failed_systems[@]} failures" "warning"
        SYSTEM_INITIALIZED=true  # Allow partial initialization
        return 0
    fi
}

# Load and initialize a specific system
load_and_init_system() {
    local system_name="$1"
    local display_name="$2"
    
    local system_file="$CORE_V2_DIR/${system_name}.sh"
    local init_function="init_${system_name}"
    
        color_printf_main "${BLUE}[DEBUG] Attempting to load system: %s${NC}\n" "$system_name" >&2
    
    # Check if system file exists
    if [[ ! -f "$system_file" ]]; then
        color_printf_main "${RED}[DEBUG] System file not found: %s${NC}\n" "$system_file" >&2
        return 1
    fi
    
    color_printf_main "${BLUE}[DEBUG] Sourcing system file: %s${NC}\n" "$system_file" >&2
    
    # Source the system file
    if ! source "$system_file" 2>&1; then
        color_printf_main "${RED}[DEBUG] Failed to source system file: %s${NC}\n" "$system_file" >&2
        return 1
    fi
    
    color_printf_main "${BLUE}[DEBUG] System file sourced successfully: %s${NC}\n" "$system_name" >&2
    
    # Check if init function exists and call it
    if declare -f "$init_function" >/dev/null 2>&1; then
        color_printf_main "${BLUE}[DEBUG] Calling init function: %s${NC}\n" "$init_function" >&2
        if "$init_function" 2>&1; then
            color_printf_main "${GREEN}[DEBUG] Init function completed: %s${NC}\n" "$init_function" >&2
            return 0
        else
            color_printf_main "${RED}[DEBUG] Init function failed: %s${NC}\n" "$init_function" >&2
            return 1
        fi
    else
        color_printf_main "${YELLOW}[DEBUG] Init function not found: %s (but this may be normal)${NC}\n" "$init_function" >&2
    fi
    
    return 0
}

# Load V2 modules integration helper
load_v2_modules_helper() {
    local v2_modules_helper="$CORE_V2_DIR/v2_modules.sh"
    if [[ -f "$v2_modules_helper" ]]; then
        source "$v2_modules_helper"
        return 0
    else
        print_startup_status "V2 modules helper not found" "warning"
        return 1
    fi
}

# Load V2 User Interface System
load_v2_ui() {
    print_startup_status "Loading V2 User Interface" "loading"
    
    local ui_file="$CORE_V2_DIR/ui_system.sh"
    color_printf_main "${BLUE}[DEBUG] UI file path: %s${NC}\n" "$ui_file" >&2
    
    if [[ -f "$ui_file" ]]; then
        color_printf_main "${BLUE}[DEBUG] UI file exists, attempting to source...${NC}\n" >&2
        if source "$ui_file" 2>/dev/null; then
            print_startup_status "UI system sourced successfully" "success"
            color_printf_main "${BLUE}[DEBUG] UI system sourced, checking for init function...${NC}\n" >&2
            if declare -f "init_ui_system" >/dev/null 2>&1; then
                print_startup_status "Initializing UI system" "loading"
                color_printf_main "${BLUE}[DEBUG] About to call init_ui_system...${NC}\n" >&2
                if timeout 10 bash -c 'declare -f init_ui_system >/dev/null && init_ui_system' 2>/dev/null; then
                    print_startup_status "V2 User Interface loaded successfully" "success"
                    color_printf_main "${GREEN}[DEBUG] UI system initialization completed successfully${NC}\n" >&2
                    return 0
                else
                    print_startup_status "UI system initialization failed or timed out" "error"
                    color_printf_main "${RED}[DEBUG] UI system initialization failed or timed out${NC}\n" >&2
                fi
            else
                print_startup_status "init_ui_system function not found" "error"
                color_printf_main "${RED}[DEBUG] init_ui_system function not found${NC}\n" >&2
            fi
        else
            print_startup_status "Failed to source UI system file" "error"
            color_printf_main "${RED}[DEBUG] Failed to source UI system file${NC}\n" >&2
        fi
    else
        print_startup_status "UI system file not found: $ui_file" "error"
        color_printf_main "${RED}[DEBUG] UI system file not found: %s${NC}\n" "$ui_file" >&2
    fi
    
    # Fallback to basic UI
    print_startup_status "Using basic fallback UI" "warning"
    color_printf_main "${YELLOW}[DEBUG] Loading fallback UI...${NC}\n" >&2
    load_fallback_ui
    return 0
}

# Load fallback UI for basic functionality
load_fallback_ui() {
    # Basic menu function
    show_main_menu() {
        clear
        print_app_header
        
        echo
        color_printf_main "${WHITE}${BOLD}═══ MENU CHÍNH ═══${NC}\n\n"
        
        color_printf_main "${CYAN}1.${NC} 📦 Quản lý gói (Packages)\n"
        color_printf_main "${CYAN}2.${NC} 🛠️  Môi trường phát triển (Development)\n" 
        color_printf_main "${CYAN}3.${NC} ⚙️  Cấu hình hệ thống (System Config)\n"
        color_printf_main "${CYAN}4.${NC} 📊 Thống kê hệ thống (System Stats)\n"
        color_printf_main "${CYAN}5.${NC} 🔧 Quản lý module (Module Management)\n"
        color_printf_main "${CYAN}6.${NC} ℹ️  Thông tin ứng dụng (About)\n"
        color_printf_main "${CYAN}0.${NC} 🚪 Thoát (Exit)\n"
        
        echo
        color_printf_main "${BOLD}Lựa chọn của bạn: ${NC}"
    }
    
    # Basic input function
    read_user_choice() {
        local choice
        read -r choice
        echo "$choice"
    }
}

# Show system information
show_system_info() {
    clear
    print_app_header
    
    color_printf_main "${WHITE}${BOLD}═══ THÔNG TIN HỆ THỐNG ═══${NC}\n\n"
    
    # Application info
    color_printf_main "${CYAN}${BOLD}Ứng dụng:${NC}\n"
    color_printf_main "  Tên: %s\n" "$APP_NAME"
    color_printf_main "  Phiên bản: %s\n" "$APP_VERSION"  
    color_printf_main "  Kiến trúc: %s\n" "$APP_ARCHITECTURE"
    color_printf_main "  Thời gian khởi động: %s ms\n" "$STARTUP_DURATION"
    
    echo
    
    # System info
    color_printf_main "${CYAN}${BOLD}Hệ thống:${NC}\n"
    color_printf_main "  OS: %s\n" "$(uname -s)"
    color_printf_main "  Kernel: %s\n" "$(uname -r)"
    color_printf_main "  Architecture: %s\n" "$(uname -m)"
    
    if [[ -f "/etc/os-release" ]]; then
        local os_name
        os_name=$(grep '^NAME=' /etc/os-release | cut -d= -f2 | tr -d '"')
        color_printf_main "  Distribution: %s\n" "$os_name"
    fi
    
    echo
    
    # Module statistics if available
    if declare -f "list_modules_enhanced" >/dev/null 2>&1; then
        color_printf_main "${CYAN}${BOLD}Module Statistics:${NC}\n"
        local total_modules loaded_modules error_modules
        total_modules=$(list_modules_enhanced "all" | wc -l)
        loaded_modules=$(list_modules_enhanced "loaded" | wc -l) 
        error_modules=$(list_modules_enhanced "error" | wc -l)
        
        color_printf_main "  Tổng số modules: %d\n" "$total_modules"
        color_printf_main "  Modules đã tải: %d\n" "$loaded_modules"
        color_printf_main "  Modules lỗi: %d\n" "$error_modules"
    fi
    
    echo
    color_printf_main "${YELLOW}Nhấn phím bất kỳ để tiếp tục...${NC}"
    read -r
}

# Run module CLI interface
run_module_cli() {
    clear
    print_app_header
    
    color_printf_main "${WHITE}${BOLD}═══ QUẢN LÝ MODULE ═══${NC}\n\n"
    
    local module_cli_path="$ROOT_DIR/bin/module-cli"
    if [[ -f "$module_cli_path" ]]; then
        color_printf_main "${CYAN}Khởi động Module CLI...${NC}\n\n"
        "$module_cli_path" interactive
    else
        color_printf_main "${RED}Module CLI không tìm thấy tại: %s${NC}\n" "$module_cli_path"
        color_printf_main "${YELLOW}Nhấn phím bất kỳ để tiếp tục...${NC}"
        read -r
    fi
}

# Handle package management
handle_packages() {
    if declare -f "handle_packages_v2" >/dev/null 2>&1; then
        handle_packages_v2
    else
        handle_packages_fallback
    fi
}

# Fallback package handler
handle_packages_fallback() {
    clear  
    print_app_header
    
    color_printf_main "${WHITE}${BOLD}═══ QUẢN LÝ GÓI ═══${NC}\n\n"
    color_printf_main "${YELLOW}V2 modules không khả dụng - sử dụng chế độ cơ bản...${NC}\n\n"
    
    color_printf_main "${CYAN}1.${NC} Cài đặt gói cơ bản\n"
    color_printf_main "${CYAN}2.${NC} Cài đặt gói phát triển\n" 
    color_printf_main "${CYAN}3.${NC} Cài đặt gói multimedia\n"
    color_printf_main "${CYAN}0.${NC} Quay lại\n"
    
    echo
    color_printf_main "${BOLD}Lựa chọn của bạn: ${NC}"
    
    local choice
    choice=$(read_user_choice)
    
    case "$choice" in
        "1"|"2"|"3")
            color_printf_main "${YELLOW}Cần cài đặt V2 modules để sử dụng tính năng này...${NC}\n"
            color_printf_main "${YELLOW}Nhấn phím bất kỳ để tiếp tục...${NC}"
            read -r
            ;;
        "0")
            return 0
            ;;
    esac
}

# Handle development environment
handle_development() {
    if declare -f "handle_development_v2" >/dev/null 2>&1; then
        handle_development_v2
    else
        handle_development_fallback
    fi
}

# Fallback development handler
handle_development_fallback() {
    clear
    print_app_header
    
    color_printf_main "${WHITE}${BOLD}═══ MÔI TRƯỜNG PHÁT TRIỂN ═══${NC}\n\n"
    color_printf_main "${YELLOW}V2 modules không khả dụng - sử dụng chế độ cơ bản...${NC}\n\n"
    
    color_printf_main "${CYAN}1.${NC} Cài đặt PHP + Composer\n"
    color_printf_main "${CYAN}2.${NC} Cài đặt Node.js + NPM\n"
    color_printf_main "${CYAN}3.${NC} Cài đặt Python + Pip\n"
    color_printf_main "${CYAN}0.${NC} Quay lại\n"
    
    echo
    color_printf_main "${BOLD}Lựa chọn của bạn: ${NC}"
    
    local choice
    choice=$(read_user_choice)
    
    case "$choice" in
        "1"|"2"|"3")
            color_printf_main "${YELLOW}Cần cài đặt V2 modules để sử dụng tính năng này...${NC}\n"
            color_printf_main "${YELLOW}Nhấn phím bất kỳ để tiếp tục...${NC}"
            read -r
            ;;
        "0")
            return 0
            ;;
    esac
}

# Handle system configuration
handle_system_config() {
    if declare -f "handle_system_config_v2" >/dev/null 2>&1; then
        handle_system_config_v2
    else
        handle_system_config_fallback
    fi
}

# Fallback system config handler
handle_system_config_fallback() {
    clear
    print_app_header
    
    color_printf_main "${WHITE}${BOLD}═══ CẤU HÌNH HỆ THỐNG ═══${NC}\n\n"
    color_printf_main "${YELLOW}V2 modules không khả dụng - sử dụng chế độ cơ bản...${NC}\n\n"
    
    color_printf_main "${CYAN}1.${NC} Cấu hình Bash\n"
    color_printf_main "${CYAN}2.${NC} Cấu hình Fish Shell\n"
    color_printf_main "${CYAN}3.${NC} Cấu hình Vim\n"
    color_printf_main "${CYAN}0.${NC} Quay lại\n"
    
    echo
    color_printf_main "${BOLD}Lựa chọn của bạn: ${NC}"
    
    local choice
    choice=$(read_user_choice)
    
    case "$choice" in
        "1"|"2"|"3")
            color_printf_main "${YELLOW}Cần cài đặt V2 modules để sử dụng tính năng này...${NC}\n"
            color_printf_main "${YELLOW}Nhấn phím bất kỳ để tiếp tục...${NC}"
            read -r
            ;;
        "0")
            return 0
            ;;
    esac
}

# Show system statistics
show_system_stats() {
    clear
    print_app_header
    
    color_printf_main "${WHITE}${BOLD}═══ THỐNG KÊ HỆ THỐNG ═══${NC}\n\n"
    
    # System uptime
    if command -v uptime >/dev/null 2>&1; then
        color_printf_main "${CYAN}${BOLD}Uptime:${NC}\n"
        uptime
        echo
    fi
    
    # Memory usage
    if command -v free >/dev/null 2>&1; then
        color_printf_main "${CYAN}${BOLD}Memory Usage:${NC}\n"
        free -h
        echo
    fi
    
    # Disk usage
    if command -v df >/dev/null 2>&1; then
        color_printf_main "${CYAN}${BOLD}Disk Usage:${NC}\n"
        df -h / 2>/dev/null || df -h
        echo
    fi
    
    # Module statistics if available
    if command -v "$ROOT_DIR/bin/module-cli" >/dev/null 2>&1; then
        color_printf_main "${CYAN}${BOLD}Module Statistics:${NC}\n"
        "$ROOT_DIR/bin/module-cli" stats 2>/dev/null || echo "Module statistics not available"
        echo
    fi
    
    color_printf_main "${YELLOW}Nhấn phím bất kỳ để tiếp tục...${NC}"
    read -r
}

# Main application loop
main_loop() {
    while true; do
        show_main_menu
        local choice
        choice=$(read_user_choice)
        
        case "$choice" in
            "1")
                handle_packages
                ;;
            "2") 
                handle_development
                ;;
            "3")
                handle_system_config
                ;;
            "4")
                show_system_stats
                ;;
            "5")
                run_module_cli
                ;;
            "6")
                show_system_info
                ;;
            "0")
                color_printf_main "\n${GREEN}Cảm ơn bạn đã sử dụng Linux Manager V2!${NC}\n"
                color_printf_main "${CYAN}Hẹn gặp lại! 👋${NC}\n\n"
                break
                ;;
            *)
                color_printf_main "\n${RED}Lựa chọn không hợp lệ. Vui lòng thử lại.${NC}\n"
                sleep 1
                ;;
        esac
    done
}

# Graceful shutdown
graceful_shutdown() {
    color_printf_main "\n\n${YELLOW}Đang thoát Linux Manager V2...${NC}\n"
    
    # Save any pending data
    if declare -f "save_registry_data" >/dev/null 2>&1; then
        save_registry_data >/dev/null 2>&1
    fi
    
    # Shutdown communication system
    if declare -f "shutdown_communication" >/dev/null 2>&1; then
        shutdown_communication >/dev/null 2>&1
    fi
    
    color_printf_main "${GREEN}Đã thoát thành công. Tạm biệt!${NC}\n"
    exit 0
}

# Set up signal handlers
trap graceful_shutdown INT TERM

# Main execution
main() {
    # Very early debug output
    echo "[DEBUG] Main function started" >&2
    
    # Record startup time
    STARTUP_TIME=$(date)
    echo "[DEBUG] Startup time recorded: $STARTUP_TIME" >&2
    
    # Print application header
    echo "[DEBUG] About to print application header" >&2
    print_app_header
    
    # Check prerequisites
    if ! check_prerequisites; then
        color_printf_main "\n${RED}Không thể khởi động do lỗi kiểm tra hệ thống.${NC}\n"
        color_printf_main "${YELLOW}Vui lòng khắc phục các vấn đề trên và thử lại.${NC}\n"
        exit 1
    fi
    
    echo
    
    # Initialize V2 systems
    if ! initialize_v2_systems; then
        color_printf_main "\n${RED}Có lỗi trong quá trình khởi tạo hệ thống.${NC}\n"
        color_printf_main "${YELLOW}Ứng dụng sẽ tiếp tục với chức năng hạn chế.${NC}\n"
        sleep 2
    fi
    
    echo
    print_startup_status "Linux Manager V2 đã sẵn sàng!" "success"
    sleep 1
    
    # Load UI and start main loop
    load_v2_ui
    main_loop
}

# Run main function if executed directly
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
